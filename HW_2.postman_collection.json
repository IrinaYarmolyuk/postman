{
	"info": {
		"_postman_id": "58b19b50-885e-4158-8602-981af1385135",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = pm.response.json();",
							"var requestData = request.data;",
							"",
							"var response_user_age = responseData.age;",
							"var response_user_name = responseData.name;",
							"var response_user_salary = responseData.salary;",
							"var response_user_family = responseData.family;",
							"var resp_salary_1_5 = responseData.family.u_salary_1_5_year",
							"",
							"console.log(response_user_family)",
							"",
							"",
							"const req_age = requestData.age;",
							"const req_name = requestData.name;",
							"const req_salary = requestData.salary.toNumber()",
							"const salar_x4 = response_user_salary * 4",
							"",
							"const test_age = '28'",
							"const test_name = 'ira'",
							"const test_salary = 1000",
							"",
							"pm.test(\"check_response_user_age\", function () {",
							"    pm.expect(response_user_age).to.eql(test_age);",
							"});",
							"",
							"pm.test(\"check_response_user_name\", function () {",
							"    pm.expect(response_user_name).to.eql(test_name);",
							"});",
							"",
							"pm.test(\"check_response_user_salary\", function () {",
							"    pm.expect(response_user_salary).to.eql(test_salary);",
							"});",
							"",
							"",
							"pm.test(\"check_response_user_age\", function () {",
							"    pm.expect(response_user_age).to.eql(req_age);",
							"});",
							"",
							"pm.test(\"check_response_user_name\", function () {",
							"    pm.expect(response_user_name).to.eql(req_name);",
							"});",
							"",
							"pm.test(\"check_response_user_salary\", function () {",
							"    pm.expect(response_user_salary).to.eql(req_salary);",
							"});",
							"",
							"pm.test(\"check_response_user_salary 1_5\", function () {",
							"    pm.expect(resp_salary_1_5).to.eql(salar_x4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "ira",
							"type": "default"
						},
						{
							"key": "age",
							"value": "28",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = pm.response.json();",
							"var resquestData = pm.request.url.query;",
							"",
							"const resp_name = responseData.name ",
							"const resp_age = responseData.age",
							"const resp_salary = responseData.salary",
							"const resp_family = responseData.family",
							"const resp_dog = responseData.family.pets.dog",
							"const resp_dog_name = responseData.family.pets.dog.name",
							"const resp_dog_age = responseData.family.pets.dog.age",
							"",
							"const req_name = resquestData.get('name')",
							"const req_age = resquestData.get('age')",
							"const req_salary = resquestData.get('salary').toNumber()",
							"",
							"console.log(resp_family)",
							"",
							"",
							"pm.test(\"response name is request name\", function () {",
							"    pm.expect(resp_name).to.eql(req_name);",
							"});",
							"pm.test(\"responce age is request age\", function () {",
							"    pm.expect(resp_age).to.eql(req_age);",
							"});",
							"pm.test(\"responce salary is request salary\", function () {",
							"    pm.expect(resp_salary).to.eql(req_salary);",
							"});",
							"",
							"pm.test(\"is_dog_has_name\", function () {",
							"    pm.expect(resp_dog).to.have.property('name')",
							"});",
							"",
							"pm.test(\"is_dog_has_age\", function () {",
							"    pm.expect(resp_dog).to.have.property('age')",
							"});",
							"",
							"pm.test(\"is_dog_has_name_luky\", function () {",
							"    pm.expect(resp_dog_name).to.eql('Luky')",
							"});",
							"",
							"pm.test(\"is_dog_has_age_4\", function () {",
							"    pm.expect(resp_dog_age).to.eql(4)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?age=28&name=ira&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "name",
							"value": "ira"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseData = pm.response.json();",
							"var resquestData = pm.request.url.query;",
							"",
							"const resp_name = responseData.name ",
							"const resp_age = responseData.age ",
							"const resp_salary_array = responseData.salary",
							"const resp_salary_elem_one = resp_salary_array[0].toNumber()",
							"const resp_salary_elem_two = resp_salary_array[1].toNumber()",
							"const resp_salary_elem_three = resp_salary_array[2].toNumber()",
							"",
							"const req_name = resquestData.get('name')",
							"const req_age = resquestData.get('age').toNumber()",
							"const req_salary = resquestData.get('salary').toNumber()",
							"const req_salary_x2 = req_salary * 2",
							"const req_salary_x3 = req_salary * 3",
							"",
							"pm.test(\"response name is request name\", function () {",
							"    pm.expect(resp_name).to.eql(req_name);",
							"});",
							"pm.test(\"responce age is request age\", function () {",
							"    pm.expect(resp_age).to.eql(req_age);",
							"});",
							"",
							"console.log(resp_salary_array)",
							"console.log(req_salary)",
							"console.log(resp_salary_elem_one)",
							"console.log(resp_salary_elem_two)",
							"console.log(resp_salary_elem_three)",
							"",
							"pm.test(\"salary0\", function () {",
							"    pm.expect(resp_salary_elem_one).to.eql(req_salary);",
							"});",
							"",
							"pm.test(\"salary1\", function () {",
							"    pm.expect(resp_salary_elem_two).to.eql(req_salary_x2);",
							"});",
							"",
							"pm.test(\"salary2\", function () {",
							"    pm.expect(resp_salary_elem_three).to.eql(req_salary_x3);",
							"});",
							"",
							"pm.environment.set(\"name\", resp_name);",
							"",
							"pm.environment.set(\"age\", resp_age);",
							"",
							"pm.environment.set(\"salary\", resp_salary_elem_one);",
							"",
							"",
							"for (let i = 0; i < resp_salary_array.length; i++) {",
							"  console.log(\"Salary element \" + (i + 1), resp_salary_array[i] );",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?age=28&name=ira&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "name",
							"value": "ira"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    // // Спарсить response body в json",
							"    var responseData = pm.response.json();",
							"    // // Спарсить request",
							"    var requestData = request.data;",
							"",
							"    const qa_salary_after_1_5_year = responseData['qa_salary_after_1.5_year'];",
							"    const qa_salary_after_3_5_year = responseData['qa_salary_after_3.5_years'];",
							"",
							"    const uName = responseData.person.u_name[1];",
							"    const uAge = responseData.person.u_age;",
							"",
							"    const resp_person = responseData.person",
							"",
							"//     // Статус код 200",
							"// pm.test(\"Status code is 200\", function () {",
							"//     pm.response.to.have.status(200);",
							"// });",
							"// // Проверить, что json response имеет параметр start_qa_salary",
							"// pm.test(\"Resp_has_start_qa_salary\", function () {",
							"//     pm.expect(responseData).to.have.property('start_qa_salary');",
							"// });",
							"// // Проверить, что json response имеет параметр qa_salary_after_6_months",
							"// pm.test(\"Resp_has_qa_salary_after_6_months\", function () {",
							"//     pm.expect(responseData).to.have.property('qa_salary_after_6_months');",
							"// });",
							"// // Проверить, что json response имеет параметр qa_salary_after_12_months",
							"// pm.test(\"Resp_has_qa_salary_after_12_months\", function () {",
							"//     pm.expect(responseData).to.have.property('qa_salary_after_12_months');",
							"// });",
							"// // Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"// pm.test(\"Resp_has_qa_salary_after_1.5_year\", function () {",
							"//     pm.expect(responseData).to.have.property('qa_salary_after_1.5_year');",
							"// });",
							"// // Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"// pm.test(\"Resp_has_qa_salary_after_3.5_years\", function () {",
							"//     pm.expect(responseData).to.have.property('qa_salary_after_3.5_years');",
							"// });",
							"// // Проверить, что json response имеет параметр person",
							"// pm.test(\"Resp_has_person\", function () {",
							"//     pm.expect(responseData).to.have.property('person');",
							"// });",
							"// // Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"// pm.test(\"responce salary is request salary\", function () {",
							"//     pm.expect(responseData.start_qa_salary).to.eql( + requestData.salary);",
							"// });",
							"// // 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"// pm.test(\"responce salary *2\", function () {",
							"//     pm.expect(responseData.qa_salary_after_6_months).to.eql( + requestData.salary*2);",
							"// });",
							"// // Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"// pm.test(\"responce salary *2.7\", function () {",
							"//     pm.expect(responseData.qa_salary_after_12_months).to.eql( + requestData.salary*2.7);",
							"// });",
							"// // Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"// pm.test(\"responce salary *3.3\", function () {",
							"//     pm.expect(qa_salary_after_1_5_year).to.eql( + requestData.salary*3.3);",
							"// });",
							"// // Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"// pm.test(\"responce salary *3.8\", function () {",
							"//     pm.expect(qa_salary_after_3_5_year).to.eql( + requestData.salary*3.8);",
							"// });",
							"// // Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"// pm.test(\"1_elem_is_salary_from_request\", function () {",
							"//   pm.expect(uName).to.eql( + requestData.salary);",
							"// });",
							"// // Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"// pm.test(\"u_age_is_age_from_request\", function () {",
							"//     pm.expect(uAge).to.eql( + requestData.age);",
							"// });",
							"// // Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"// pm.test(\"responce salary *4.2\", function () {",
							"//     pm.expect(responseData.person.u_salary_5_years).to.eql( + requestData.salary*4.2);",
							"// });",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for (const key in resp_person) {",
							"    if (['u_name', 'u_age', 'u_salary_5_years'].includes(key)) {",
							"        console.log(resp_person[key]);",
							"    }",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "{{name}}",
							"value": null,
							"disabled": true
						},
						{
							"key": "{{age}}",
							"value": null,
							"disabled": true
						},
						{
							"key": "{{salary}}",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}